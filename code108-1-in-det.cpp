#include <iostream>
using namespace std;

// Структура за стек
struct pstack {
	int i;          // Информационна част - стойност на елемента в стека
	pstack* next;   // Указател към следващия елемент в стека (аналогично на списък)
};

// Функция за добавяне на елемент в началото на стека
void insert(pstack*& l, int x) {
	// Създаваме нов елемент. Запазваме памет за "p", което е указател към новия елемент.
	pstack* p = new(pstack);
	// Задаваме стойността на информационното поле "i" на новия елемент със стойността "x".
	p->i = x;
	// Указателят "next" на новия елемент насочваме към стария връх на стека (l).
	p->next = l;
	// Пренасочваме указателя "l" да сочи към новия елемент, който става връх на стека.
	l = p;
}

// Функция за премахване на елемент от началото на стека
void pop(pstack*& l) {
	// Проверка дали стекът е празен.
	if (l == NULL) {
		// Ако стекът е празен, извеждаме съобщение.
		cout << "Stack is empty" << endl;
	} else {
		// Дефинираме временен указател "p", който сочи върха на стека.
		pstack* p = l;
		// Пренасочваме "l" да сочи към следващия елемент.
		l = l->next;
		// Освобождаваме паметта на стария връх, който вече не е част от стека.
		delete(p);
	}
}

// Функция за отпечатване на всички елементи в стека
void printl(pstack* l) {
	// Обхождаме всички елементи в стека.
	while (l != NULL) {
		// Отпечатваме стойността на текущия елемент.
		cout << l->i << endl;
		// Преход към следващия елемент.
		l = l->next;
	}
}

// Главна функция
int main() {
	// Променлива "n" за броя на елементите, които ще добавяме.
	// Променлива "a" за стойността на текущия елемент.
	int n, i, a;
	// Указател "list", който сочи към началото на стека. Първоначално стекът е празен (NULL).
	pstack* list = NULL;

	// Подканване за въвеждане на броя елементи, които ще добавяме в стека.
	cout << "Enter number of elements to add: ";
	cin >> n;

	// Четене на елементи и добавяне в стека
	for (i = 1; i <= n; i++) {
		// Подканване за въвеждане на стойността на текущия елемент.
		cout << "Enter element " << i << ": ";
		cin >> a;
		// Добавяме текущия елемент в началото на стека.
		insert(list, a);
	}

	// Отпечатваме състоянието на стека след добавянето на всички елементи.
	cout << "List after insertion:" << endl;
	printl(list);

	// Премахваме първия елемент (връх на стека).
	cout << "List after popping one element:" << endl;
	pop(list);
	// Отново отпечатваме оставащите елементи в стека.
	printl(list);

	return 0;
}
